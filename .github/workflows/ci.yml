name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx3072m -XX:+HeapDumpOnOutOfMemoryError" -Dorg.gradle.daemon=false

jobs:
  # Job 1: Core Plugin Tests and Build
  core-plugin:
    name: Core Plugin Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        cache-read-only: false
        
    - name: Check code formatting
      run: ./gradlew spotlessCheck
      
    - name: Run core plugin tests
      run: ./gradlew test --parallel
      
    - name: Build core plugin
      run: ./gradlew build --parallel
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: core-plugin-test-results
        path: |
          **/build/reports/tests/
          **/build/test-results/

  # Job 2: Android Example Build
  android-example:
    name: Android Example Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        cache-read-only: false
        
    - name: Build core plugin first
      run: ./gradlew publishToMavenLocal --parallel
      
    - name: Build Android example
      working-directory: ./android-example
      run: ./gradlew build --parallel
      
    - name: Run Android example tests
      working-directory: ./android-example
      run: ./gradlew test --parallel
      
    - name: Upload Android build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: android-example-artifacts
        path: |
          android-example/app/build/outputs/
          android-example/**/build/reports/tests/

  # Job 3: KMP Example Build
  kmp-example:
    name: KMP Example Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        cache-read-only: false
        
    - name: Build core plugin first
      run: ./gradlew publishToMavenLocal --parallel
      
    - name: Build KMP example
      working-directory: ./compilugin-example
      run: ./gradlew build --parallel
      
    - name: Upload KMP build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kmp-example-artifacts
        path: |
          compilugin-example/**/build/outputs/
          compilugin-example/**/build/reports/

  # Job 4: Integration Tests (depends on all other jobs)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [core-plugin, android-example, kmp-example]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        cache-read-only: false
        
    - name: Run full integration build
      run: |
        ./gradlew publishToMavenLocal --parallel
        cd android-example && ./gradlew build --parallel
        cd ../compilugin-example && ./gradlew build --parallel
      
    - name: Verify all builds successful
      run: echo "All modules built successfully!"

  # Job 5: Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        cache-read-only: false
        
    - name: Check code formatting
      run: ./gradlew spotlessCheck
      
    - name: Run static analysis
      run: ./gradlew check --parallel