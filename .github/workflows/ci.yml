name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx3072m -XX:+HeapDumpOnOutOfMemoryError" -Dorg.gradle.daemon=false

jobs:
  # Job 1: Core Plugin Tests and Build
  core-plugin:
    name: Core Plugin Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        cache-read-only: false
        
    - name: Auto-format code if needed
      run: |
        # Check if formatting is needed
        if ! ./gradlew spotlessCheck; then
          echo "üîß Code formatting violations found, applying fixes..."
          ./gradlew spotlessApply
          
          # Check if there are changes to commit
          if ! git diff --quiet; then
            echo "üìù Committing formatting changes..."
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add -A
            git commit -m "üé® Auto-fix code formatting violations"
            git push origin ${{ github.head_ref || github.ref_name }}
            echo "‚úÖ Formatting changes committed and pushed"
          else
            echo "‚ÑπÔ∏è No formatting changes needed"
          fi
        else
          echo "‚úÖ Code formatting is already correct"
        fi
        
    - name: Verify code formatting
      run: ./gradlew spotlessCheck
      
    - name: Run comprehensive plugin tests
      run: |
        echo "üß™ Running comprehensive test suite..."
        ./gradlew test --parallel --continue --info
        echo "‚úÖ Test execution completed"
        
    - name: Generate detailed test report
      if: always()
      run: |
        echo "## üìä Comprehensive Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check for test results
        if [ -d "build/reports/tests/test" ]; then
          echo "### ‚úÖ Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          
          # Count test files
          TEST_FILES=$(find src/test -name "*Test.kt" | wc -l)
          echo "- **Test Files**: $TEST_FILES test classes" >> $GITHUB_STEP_SUMMARY
          
          # List test classes
          echo "- **Test Classes**:" >> $GITHUB_STEP_SUMMARY
          find src/test -name "*Test.kt" -exec basename {} .kt \; | sed 's/^/  - /' >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Test Categories Covered" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Basic Functionality**: Function visitor, annotations, parameters" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Edge Cases**: Generics, suspend functions, operators, extensions" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Integration**: Real-world scenarios, inheritance, concurrency" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Configuration**: Plugin options, custom annotations, custom visitors" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Compatibility**: JVM targets, Kotlin language features, platform support" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Test reports not found" >> $GITHUB_STEP_SUMMARY
        fi
      
    - name: Build core plugin
      run: ./gradlew build --parallel
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: core-plugin-test-results
        path: |
          **/build/reports/tests/
          **/build/test-results/

  # Job 2: Android Example Build
  android-example:
    name: Android Example Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        cache-read-only: false
        
    - name: Build core plugin first
      run: ./gradlew publishToMavenLocal --parallel -PRELEASE_SIGNING_ENABLED=false
      
    - name: Make Android gradlew executable
      working-directory: ./android-example
      run: chmod +x gradlew
      
    - name: Build Android example
      working-directory: ./android-example
      run: ./gradlew build --parallel --no-daemon --no-configuration-cache
      timeout-minutes: 10
      
    - name: Run Android example tests
      working-directory: ./android-example  
      run: ./gradlew test --parallel

  # Job 3: KMP Example Build
  kmp-example:
    name: KMP Example Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        cache-read-only: false
        
    - name: Build core plugin first
      run: ./gradlew publishToMavenLocal --parallel -PRELEASE_SIGNING_ENABLED=false
      
    - name: Make KMP gradlew executable
      working-directory: ./compilugin-example
      run: chmod +x gradlew
      
    - name: Build KMP example
      working-directory: ./compilugin-example
      run: ./gradlew build --parallel --no-daemon --no-configuration-cache
      timeout-minutes: 10

  # Job 4: Integration Tests (depends on all other jobs)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [core-plugin, android-example, kmp-example]
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        cache-read-only: false
        
    - name: Run full integration build
      run: |
        ./gradlew publishToMavenLocal --parallel -PRELEASE_SIGNING_ENABLED=false
        cd android-example && chmod +x gradlew && ./gradlew build --parallel --no-daemon --no-configuration-cache
        cd ../compilugin-example && chmod +x gradlew && ./gradlew build --parallel --no-daemon --no-configuration-cache
      timeout-minutes: 15
      
    - name: Verify all builds successful
      run: echo "All modules built successfully!"

  # Job 5: Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        cache-read-only: false
        
    - name: Auto-format code if needed  
      run: |
        # Check if formatting is needed
        if ! ./gradlew spotlessCheck; then
          echo "üîß Code formatting violations found, applying fixes..."
          ./gradlew spotlessApply
          
          # Check if there are changes to commit
          if ! git diff --quiet; then
            echo "üìù Committing formatting changes..."
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add -A
            git commit -m "üé® Auto-fix code formatting violations"
            git push origin ${{ github.head_ref || github.ref_name }}
            echo "‚úÖ Formatting changes committed and pushed"
          else
            echo "‚ÑπÔ∏è No formatting changes needed"
          fi
        else
          echo "‚úÖ Code formatting is already correct"
        fi
        
    - name: Verify code formatting
      run: ./gradlew spotlessCheck
      
    - name: Run static analysis
      run: ./gradlew check --parallel