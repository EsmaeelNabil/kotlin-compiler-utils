name: Prepare and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New version (e.g., 0.0.7)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
        default: 'New release with improvements and bug fixes'

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx3072m -XX:+HeapDumpOnOutOfMemoryError" -Dorg.gradle.daemon=false

jobs:
  prepare-and-release:
    name: Update Version, Build, and Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        cache-read-only: false
        
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Update version in gradle.properties
      run: |
        sed -i.bak "s/VERSION_NAME=.*/VERSION_NAME=${{ github.event.inputs.version }}/" gradle.properties
        rm gradle.properties.bak
        
    - name: Update version in README.md
      run: |
        # Update the plugin version in README
        sed -i.bak 's/id("dev.supersam.compilugin") version "[^"]*"/id("dev.supersam.compilugin") version "${{ github.event.inputs.version }}"/' README.md
        rm README.md.bak
        
    - name: Update other version references
      run: |
        # Update any other files that might contain version references
        find . -name "*.md" -not -path "./.git/*" -not -path "./build/*" -exec sed -i.bak 's/version "[0-9]\+\.[0-9]\+\.[0-9]\+"/version "${{ github.event.inputs.version }}"/g' {} \;
        find . -name "*.bak" -delete
        
    - name: Verify changes
      run: |
        echo "=== Updated gradle.properties ==="
        grep "VERSION_NAME" gradle.properties
        echo "=== Updated README.md ==="
        grep -n "compilugin.*version" README.md || echo "No version found in README"
        echo "=== Git status ==="
        git status
        
    - name: Run tests before release
      run: ./gradlew spotlessCheck test --parallel
      
    - name: Commit version changes
      run: |
        git add -A
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "🚀 Release v${{ github.event.inputs.version }}
          
          - Updated version to ${{ github.event.inputs.version }}
          - Updated documentation
          - Automated release preparation
          
          ${{ github.event.inputs.release_notes }}"
          git push origin main
        fi
        
    - name: Create and push tag
      run: |
        git tag "v${{ github.event.inputs.version }}"
        git push origin "v${{ github.event.inputs.version }}"
        
    - name: Setup GPG signing
      env:
        SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
      run: |
        echo "$SIGNING_KEY" | base64 --decode > /tmp/secring.gpg
        
    - name: Build and publish to Maven Central
      env:
        MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
        SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
        SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
        SIGNING_SECRET_KEY_RING_FILE: /tmp/secring.gpg
      run: |
        echo "🚀 Publishing release v${{ github.event.inputs.version }}..."

        PROPERTIES=(
          "-Psigning.keyId=${SIGNING_KEY_ID}"
          "-Psigning.password=${SIGNING_PASSWORD}"
          "-Psigning.secretKeyRingFile=${SIGNING_SECRET_KEY_RING_FILE}"
          "-PmavenCentralUsername=${MAVEN_CENTRAL_USERNAME}"
          "-PmavenCentralPassword=${MAVEN_CENTRAL_PASSWORD}"
        )

        # Build everything first
        ./gradlew build --parallel

        # Publish following the same pattern as publish.sh
        cd compilugin-compiler-plugin-gradle
        ./gradlew publish --no-configuration-cache "${PROPERTIES[@]}"
        cd ..
        ./gradlew publish --no-configuration-cache "${PROPERTIES[@]}"

        echo "✅ Successfully published to Maven Central!"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        body: |
          ## 🚀 Release v${{ github.event.inputs.version }}
          
          ${{ github.event.inputs.release_notes }}
          
          ### 📦 Installation
          
          ```kotlin
          plugins {
              id("dev.supersam.compilugin") version "${{ github.event.inputs.version }}"
          }
          ```
          
          ### 🔗 Links
          - [Maven Central](https://central.sonatype.com/artifact/dev.supersam.compilugin/compilugin-compiler-plugin/${{ github.event.inputs.version }})
          - [Documentation](https://github.com/esmaeelnabil/kotlin-compiler-utils#readme)
          
          ---
          *This release was automatically generated and published by GitHub Actions.*
        draft: false
        prerelease: false
        
    - name: Update summary
      run: |
        echo "## 🎉 Release v${{ github.event.inputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ What was done:" >> $GITHUB_STEP_SUMMARY
        echo "- 📝 Updated version in all files" >> $GITHUB_STEP_SUMMARY
        echo "- 🧪 Ran tests and formatting checks" >> $GITHUB_STEP_SUMMARY
        echo "- 💾 Committed changes to main branch" >> $GITHUB_STEP_SUMMARY
        echo "- 🏷️ Created git tag v${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 Published to Maven Central" >> $GITHUB_STEP_SUMMARY
        echo "- 🎯 Created GitHub release" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Links:" >> $GITHUB_STEP_SUMMARY
        echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ github.event.inputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Maven Central](https://central.sonatype.com/artifact/dev.supersam.compilugin/compilugin-compiler-plugin/${{ github.event.inputs.version }})" >> $GITHUB_STEP_SUMMARY